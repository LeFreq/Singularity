This is a project to create a new OS starting from basic principles of OS theory, new architecture knowledge (Zen Code), and to fix the bloatware that all modern OSs have become, no thanks to artificially cheap manufacturing prices and other voodoo.  This project is made also to fix the instabilities that have cropped up from poor or inadequate design choices from legacy systems, including Intel, X, Microsoft, 

This project may replace Singularity OS.

The other design goal is the formation of a Data Ecosystem.  Recognizing that data is growing faster than coding expertise, this project will experiment with ideals such as "language as an OS", trying new language ideas that facilitate such concepts.

Multiprocessing will be addressed

Core design goals and philosophies:
1. A two core relationships to the machine:  data administration and application-user
2. One can create all the essential functionality of the general-purpose computer by using better architecture to yield better performance and less memory consumption.
3. All data relates to other data, so make application "mashups" that relate to that data in all the ways users want, much like unix commands + pipes
4. The network is the computer; so integrate P2P architecture directly in the OS.

This OS will implement the material in "Gospel of Object-Oriented Programming" at wiki.hackerspaces.org.  Those objects are both applications and data objects in a Unified Object Model (you can pronounce it "yum").  Files are objcts, apps are objects, data are objects.  Finally realizing the design goals of OOP:  modularity (re-use), encapsulation (data security), and including object-sharing across networks (P2P).  The internet produces exabytes of data, if the "network is the computer", then one should be able to create a pretty sweet cyberspace portal into it.





